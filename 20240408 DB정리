-- HR
-- 1. professor 테이블에서 교수의 이름과 학과명을 출력하되
-- 학과 번호가 101번이면 'Computer Engineering'
-- 102 = 'Multimedia Engineering'
-- 103 = 'Software Engineering'
-- 나머지는 'ETC'로 출력하세요

SELECT * FROM PROFESSOR;
SELECT PROFNO, NAME,DEPTNO,
DECODE(DEPTNO,101,'Computer Engineering',
              102,'Multimedia Engineering',
              103, 'Software Engineering',
              'ETC')
FROM PROFESSOR;

-- 2. STUDENT
SELECT * FROM STUDENT;
-- TEL의 지역번호에서 02 서울, 051 부산, 052 울산, 053 대구
-- 나머지는 기타로 출력
-- 이름, 전화번호, 지역 출력

-- SELECT NAME,TEL,
-- CASE
-- WHEN SUBSTR(TEL,1,3) LIKE '02%' THEN '서울'
-- WHEN SUBSTR(TEL,1,3) LIKE '051%' THEN '부산'
-- WHEN SUBSTR(TEL,1,3) LIKE '052%' THEN '울산'
-- WHEN SUBSTR(TEL,1,3) LIKE '053%' THEN '대구'
-- ELSE '기타'
-- END AS "지역"
-- FROM STUDENT;

SELECT NAME, TEL,
DECODE (SUBSTR(TEL ,1,INSTR(TEL, ')')-1),'2','서울',
'051','부산',
'052','울산',
'053','대구',
'기타')지역
FROM STUDENT;

-- PROFESSOR 테이블
-- 학과별로 소속 교수들의 평균급여, 최소급여, 최대급여 출력
-- 단, 평균급여가 300 넘는 것만 출력
SELECT * FROM PROFESSOR;
SELECT DEPTNO ,ROUND(AVG(PAY)),MIN(PAY),MAX(PAY)
FROM PROFESSOR
GROUP BY DEPTNO
HAVING AVG(PAY) > 300
ORDER BY DEPTNO;

--STUDENT 테이블
--학생수가 4명 이상인 학년에 대해서 학년, 학생 수, 평균 키, 평균 몸무게를 출력
--단, 평균 키와 평균 몸무게는 소숫점 첫 번째 자리에서 반올림하고,
--출력순서는 평균 키가 높은 순부터 내림차순으로 출력하여라.
SELECT * FROM STUDENT;
SELECT GRADE ||'학년', COUNT(*) 학생수, ROUND(AVG(HEIGHT)) 평균키, ROUND(AVG(WEIGHT)) 평균몸무게
FROM STUDENT
GROUP BY GRADE
HAVING COUNT(*) >=4
ORDER BY AVG(HEIGHT) DESC;

-- 학생이름, 지도교수 이름 출력
SELECT * FROM STUDENT;
SELECT * FROM PROFESSOR;


SELECT S.NAME 학생,P.NAME 지도교수  
FROM STUDENT S,PROFESSOR P
WHERE S.PROFNO = P.PROFNO;

SELECT S.NAME 학생,P.NAME 지도교수 
FROM STUDENT S JOIN PROFESSOR P
ON S.PROFNO = P.PROFNO;

--GIFT, CUSTOMER
SELECT * FROM GIFT;
SELECT * FROM CUSTOMER;
--고객이름, 포인트, 선물
--비 등가 조인
SELECT C.GNAME 고객이름, C.POINT 포인트, G.GNAME 선물
FROM CUSTOMER C, GIFT G
WHERE C.POINT BETWEEN G_START AND G_END;

SELECT C.GNAME 고객이름, C.POINT 포인트, G.GNAME 선물
FROM CUSTOMER C JOIN GIFT G
ON C.POINT BETWEEN G_START AND G_END;

--
SELECT * FROM STUDENT;
SELECT * FROM SCORE;
SELECT * FROM HAKJUM;

-- 학생들의 이름, 점수, 학점 출력
SELECT S.NAME, C.TOTAL, H.GRADE
FROM STUDENT S,SCORE C,HAKJUM H
WHERE S.STUDNO = C.STUDNO AND C.TOTAL BETWEEN H.MIN_POINT AND H.MAX_POINT;  

SELECT S.NAME, C.TOTAL, H.GRADE
FROM STUDENT S,SCORE C,HAKJUM H
WHERE S.STUDNO = C.STUDNO 
AND C.TOTAL >= H.MIN_POINT 
AND C.TOTAL <= H.MAX_POINT;

--JOIN ON 사용

SELECT S.NAME, C.TOTAL, H.GRADE
FROM STUDENT S JOIN SCORE C 
ON S.STUDNO = C.STUDNO
JOIN HAKJUM H
ON  C.TOTAL >= H.MIN_POINT 
AND C.TOTAL <= H.MAX_POINT;

-- student , professor
-- 학생이름과 지도교수 이름 출력하되 지도교수가 정해지지 않은 학생이름도 출력
SELECT * FROM STUDENT;
SELECT * FROM PROFESSOR;

SELECT S.NAME 학생이름, P.NAME 지도교수
FROM STUDENT S,PROFESSOR P
WHERE S.PROFNO = P.PROFNO (+);

SELECT S.NAME, P.NAME
FROM STUDENT S LEFT OUTER JOIN PROFESSOR P
ON S.PROFNO = P.PROFNO;

SELECT S.NAME, P.NAME
FROM PROFESSOR P RIGHT OUTER JOIN STUDENT S
ON S.PROFNO = P.PROFNO;

--101번 학과에 소속된 지도교수 이름출력
--단 지도교수가 없는 학생도 출력(학생이름, 지도교수이름 출력)

SELECT S.NAME 학생이름, P.NAME 지도교수, P.DEPTNO 학과
FROM STUDENT S,PROFESSOR P
WHERE S.DEPTNO1 = 101 
AND S.PROFNO = P.PROFNO(+);

SELECT S.NAME 학생이름, P.NAME 지도교수, P.DEPTNO 학과
FROM STUDENT S LEFT OUTER JOIN PROFESSOR P
ON S.PROFNO = P.PROFNO(+)   WHERE S.DEPTNO1 = 101;
------------------------
SELECT * FROM DEPT2;
SELECT * FROM EMP2;
-- DEPT2에서 지역이 SEOUL BRANCH OFFICE인 사원의 사원번호,이름, 부서번호

SELECT E.EMPNO,E.NAME,E.DEPTNO
FROM EMP2 E, DEPT2 D
WHERE DEPTNO = DCODE AND AREA = 'Seoul Branch Office';

--

SELECT EMPNO,NAME,DEPTNO
FROM EMP2
WHERE DEPTNO IN (
                    SELECT DCODE
                    FROM DEPT2
                    WHERE AREA = 'Seoul Branch Office'
                );
----
-- STUDENT 테이블 각 학년별 최대 몸무게를 가진 학생의 학년,이름,몸무게를 출력하세요
SELECT * FROM STUDENT;

SELECT GRADE 학년, NAME 이름, MAX(WEIGHT)몸무게
FROM STUDENT
GROUP BY GRADE,NAME;

SELECT GRADE, NAME, WEIGHT
FROM STUDENT
WHERE(GRADE,WEIGHT) IN (
                        SELECT GRADE , MAX(WEIGHT)
                        FROM STUDENT
                        GROUP BY GRADE
                        );
                        
--(PROFESSOR, DEPARTMENT) 테이블
-- 각 학과별 입사일 가장 오래된 교수의 교수번호, 이름, 학과명 출력
-- 단 입사일은 오름차순 (PROFESSOR, DEPARTMENT)
SELECT * FROM PROFESSOR;
SELECT DEPTNO,MIN(HIREDATE)
FROM PROFESSOR
GROUP BY DEPTNO;

SELECT P.PROFNO,P.NAME,P.DEPTNO,
       D.DNAME,P.HIREDATE
FROM PROFESSOR P, DEPARTMENT D
WHERE P.DEPTNO = D.DEPTNO
AND (P.DEPTNO, P.HIREDATE) IN (SELECT DEPTNO, MIN(HIREDATE)
                                FROM PROFESSOR
                                GROUP BY DEPTNO)
ORDER BY P.DEPTNO;

SELECT P.PROFNO,P.NAME,P.DEPTNO,
       D.DNAME,P.HIREDATE
FROM PROFESSOR P, DEPARTMENT D
WHERE P.DEPTNO = D.DEPTNO
AND (P.DEPTNO, P.HIREDATE) IN (SELECT DEPTNO, MIN(HIREDATE)
                                FROM PROFESSOR
                                GROUP BY DEPTNO)
ORDER BY 3;

--SCOTT
--P238 
-- EMP와 DEPT의 급여가 3000이상이며 직속상관이 반드시 존재함
-- 사원번호, 이름, 직책,매니저,hiredate,sal,comm,deptno,dname, loc
-- join ~ using 사용
select empno, ename, job, mgr, hiredate, sal, comm, deptno, dname, loc
from emp e join dept d using(deptno)
where sal >=3000 and mgr is not null;

select * from emp;
select * from dept;

select empno, ename, job, mgr, hiredate, sal, comm, d.deptno, dname, loc
from emp e join dept d 
on d.deptno = e.deptno and sal >=3000 and mgr is not null;
--P242 서브쿼리 WHERE 조건전에 쿼리를 들어가는 것
SELECT * FROM EMP;
--WARD 보다 월급이 많이 받은 사원 이름 출력
SELECT SAL FROM EMP WHERE ENAME = 'WARD';
SELECT ENAME
FROM EMP
WHERE SAL > (
            SELECT SAL 
            FROM EMP
            WHERE ENAME = 'WARD'
            );
-- 'ALLEN'의 직무(JOB)와 같은 사람의 이름,부서명,급여,직무출력
SELECT * FROM EMP;
SELECT * FROM DEPT;
SELECT ENAME,JOB,D.DNAME,SAL
FROM EMP E, DEPT D
WHERE E.DEPTNO = D.DEPTNO 
AND JOB = (
            SELECT JOB 
            FROM EMP
            WHERE ENAME = 'ALLEN'
          )
            AND ENAME NOT LIKE 'ALLEN';
            
--'SMITH' 보다 일찍 입사한 사원의 정보
SELECT *
FROM EMP
WHERE HIREDATE < '81/02/20';

SELECT *
FROM EMP
WHERE HIREDATE < 
                (
                    SELECT HIREDATE
                    FROM EMP
                    WHERE ENAME = 'ALLEN'
                );
-- 전체 사원의 평균 임금보다 많은 사원의 사원번호,이름,부서명,입사일 출력


SELECT EMPNO,ENAME,D.DNAME,HIREDATE
FROM EMP E, DEPT D
WHERE E.DEPTNO = D.DEPTNO
AND
SAL > (
            SELECT AVG(SAL)
            FROM EMP
      );


--P248
-- 전체 사원의 평균 급여보다 작거나 같은 급여를 받고 있는
-- 20번 부서의 사원 및 부서정보
-- 사원번호,이름,직무,급여,부서번호,부서명,부서지역

SELECT EMPNO,ENAME,JOB,SAL,E.DEPTNO,DNAME,LOC
FROM EMP E, DEPT D
WHERE E.DEPTNO = D.DEPTNO
AND SAL <= (
            SELECT AVG(SAL)
            FROM EMP
           )
AND D.DEPTNO = 20;

--각 부서별 최고급여와 동일한 급여를 받는 사원정보를 출력
SELECT *
FROM EMP
WHERE SAL IN (
                SELECT MAX(SAL)
                FROM EMP
                GROUP BY DEPTNO
             );
-- 30번 부서 중에서 10번 부서에는 없는 업무(JOB)를 하는 SALES
-- 사원의 사원번호, 이름, 부서명, 입사일, 지역 출력
SELECT * FROM DEPT;

SELECT JOB FROM EMP E
WHERE E.DEPTNO = 10;

SELECT JOB FROM EMP
WHERE DEPTNO = 30;

SELECT EMPNO,ENAME,D.DNAME,HIREDATE,D.LOC
FROM EMP E,DEPT D
WHERE E.DEPTNO = D.DEPTNO
AND E.DEPTNO = 10
AND E.JOB NOT IN (
                     SELECT JOB FROM EMP 
                     WHERE DEPTNO = 30                  
                );
--MGR 이 KING인 사원의 이름과 JOB 출력 
--서브쿼리 출력
SELECT ENAME, JOB
FROM EMP
WHERE MGR = (
                SELECT EMPNO FROM EMP
                WHERE ENAME = 'KING'
               );

--서브쿼리 X

SELECT E1.ENAME, E1.JOB
FROM EMP E1, EMP E2
WHERE E1.MGR = E2.EMPNO AND E2.ENAME = 'KING';

SELECT * FROM EMP;

-- 매니저가 KING이거나 FORD인 사원의 이름과 직급 출력

SELECT EMPNO,ENAME,JOB,MGR
FROM EMP
WHERE MGR = (
                SELECT EMPNO FROM EMP
                WHERE ENAME = 'FORD'
            )
OR
MGR = (
                SELECT EMPNO FROM EMP
                WHERE ENAME = 'KING'
            )
;

SELECT ENAME,JOB
FROM EMP
WHERE MGR IN (
                SELECT EMPNO
                FROM EMP
                WHERE ENAME = 'KING' OR ENAME = 'FORD'
                );
            
SELECT E.ENAME, E.JOB
FROM EMP E, EMP M
WHERE E.MGR = M.EMPNO AND (M.ENAME = 'KING' OR M.ENAME='FORD');

--P251
SELECT ENAME, SAL
FROM EMP
WHERE SAL < ANY(SELECT SAL FROM EMP WHERE JOB='SALESMAN'
                OR ENAME='FORD' );

SELECT ENAME,JOB,SAL
FROM EMP;

--30번 부서보다 적은 급여를 받는 사원 출력 ANY ,ALL 사용
SELECT ENAME, SAL
FROM EMP
WHERE SAL < ANY(
                    SELECT MAX(SAL) FROM EMP WHERE DEPTNO = '30'
                );

SELECT ENAME, SAL
FROM EMP          
WHERE SAL < ALL(
                    SELECT MAX(SAL) FROM EMP WHERE DEPTNO = '30'
                );
                
-- 239~240P 8장 연습문제
-- 급여 SAL 2000초과인 사원들의 부서정보, 사원정보 출력
SELECT E.DEPTNO, DNAME, EMPNO,ENAME,SAL
FROM EMP E,DEPT D
WHERE SAL > 2000 AND E.DEPTNO = D.DEPTNO;

SELECT DEPTNO, DNAME, EMPNO,ENAME,SAL
FROM EMP E NATURAL JOIN DEPT D
WHERE SAL > 2000;

--각 부서별 (평균,최대,최소)급여, 사원수 출력
SELECT E.DEPTNO,DNAME,TRUNC(AVG(SAL)) AVG_SAL,MAX(SAL) MAX_SAL,MIN(SAL) MIN_SAL,COUNT(*) CNT
FROM EMP E,DEPT D
WHERE E.DEPTNO = D.DEPTNO
GROUP BY E.DEPTNO,DNAME;

SELECT E.DEPTNO,DNAME,ROUND(AVG(SAL)) AVG_SAL,MAX(SAL) MAX_SAL,MIN(SAL) MIN_SAL,COUNT(*) CNT
FROM EMP E JOIN DEPT D 
ON E.DEPTNO = D.DEPTNO
GROUP BY E.DEPTNO,DNAME;

SELECT DEPTNO,DNAME,TRUNC(AVG(SAL)) AVG_SAL,MAX(SAL) MAX_SAL,MIN(SAL) MIN_SAL,COUNT(*) CNT
FROM EMP E JOIN DEPT D
USING(DEPTNO)
GROUP BY DEPTNO,DNAME;

--모든 부서정보와 사원정보를 부서번호,사원이름으로 정렬하여 출력하기
SELECT E.DEPTNO, D.DNAME, E.EMPNO, E.ENAME,E.JOB,E.SAL
FROM EMP E, DEPT D
WHERE D.DEPTNO = E.DEPTNO(+)
ORDER BY D.DEPTNO,E.ENAME ASC;

SELECT D.DEPTNO, D.DNAME, E.EMPNO, E.ENAME,E.JOB,E.SAL
FROM DEPT D LEFT OUTER JOIN EMP E
ON E.DEPTNO=D.DEPTNO
ORDER BY D.DEPTNO,E.ENAME ASC;

-- 모든 부서 정보, 사원 정보, 급여 등급 정보, 각 사원의 직속 상관의 정보를 부서번호,
-- 사원번호 순서로 정렬하여 출력해 보세요
SELECT * FROM EMP;
SELECT * FROM DEPT;
SELECT * FROM SALGRADE;

SELECT D.DEPTNO, D.DNAME, 
       E.EMPNO, E.ENAME, E.MGR, E.SAL, E.DEPTNO,
       S.LOSAL, S.HISAL, S.GRADE,
       E2.EMPNO MGR_EMPNO, E2.ENAME MGR_ENAME
FROM EMP E, DEPT D, SALGRADE S, EMP E2
WHERE E.DEPTNO(+) = D.DEPTNO
AND E.SAL BETWEEN S.LOSAL(+) AND S.HISAL(+)
AND E.MGR = E2.EMPNO(+)
ORDER BY D.DEPTNO, E.EMPNO;

SELECT D.DEPTNO, D.DNAME, 
       E.EMPNO, E.ENAME, E.MGR, E.SAL, E.DEPTNO,
       S.LOSAL, S.HISAL, S.GRADE,
       E2.EMPNO MGR_EMPNO, E2.ENAME MGR_ENAME
FROM EMP E 
RIGHT OUTER JOIN DEPT D
ON(E.DEPTNO = D.DEPTNO)
LEFT OUTER JOIN SALGRADE S
ON(E.SAL BETWEEN S.LOSAL AND S.HISAL)
LEFT OUTER JOIN EMP E2
ON(E.MGR = E2.EMPNO)
ORDER BY D.DEPTNO, E.EMPNO;

SELECT * FROM DEPT
WHERE EXISTS (
                SELECT DEPTNO
                FROM DEPT
                WHERE DEPTNO =20
                );
                
--P258 부서별 최대 급여를 가진 사원 정보 출력
SELECT DEPTNO, MAX(SAL)
FROM EMP
GROUP BY DEPTNO;

SELECT *
FROM EMP
WHERE(DEPTNO,SAL) IN (
                        SELECT DEPTNO, MAX(SAL)
                        FROM EMP
                        GROUP BY DEPTNO
                        );

-- P266 
-- DML = DATA를 추가나 수정, 삭제하는 데이터 조작어
-- DDL = 객체를 생성,변경,삭제하는 데이터 정의어(P311)

-- TEST1(no,name,address,tel)
-- number(5), 문자열(20), 문자열(50), 문자열(20)

-- 테이블 생성시 칼럼명과 칼럼타입을 순차적으로 작성하고
-- Create teble 테이블명 ( (칼럼이름),(데이터타입) ) 이렇게 정리한다. 
-- 따라서 정리하면 아래와 같은 결과가 있다.
-- 숫자형(number), 문자형(varchar) 가변성이 없는 문자, varchar2 가변성이
-- 존재하는 문자
create table test1 (
                no number(5),
                name varchar2(20),
                address varchar2(20),
                tel varchar2(20)
                );

select * from test1;

-- (1,'aaa')추가(no, name)
-- 무언가를 추가할 때 insert into 테이블명( 추가할 칼럼명 ) values( 값 )

insert into test1(no,name) values (1,'aaa');
select * from test1;

-- (2,'bbb','부산','010-1111-2222')추가 위와동일

insert into test1(no,name,address,tel) values (2,'bbb','부산','010-1111-2222');
select * from test1;

-- 이름 홍길동으로 수정 2번조건
-- 무언가를 수정할 때 update 테이블명 set 칼럼명 = 수정사항

update test1 set name = '홍길동'
where no=2;

-- 이름 test 주소 서울 1번 조건
update test1 set name = 'test', address = '서울'
where no = 1;

select * from test1;

-- 1번항목 삭제하기
-- 무언가를 삭제할 땐 delete from 테이블 명칭을 사용한다.

delete from test1
where no=1;

select * from test1;0

-- 테이블 생성 복습
-- 테이블 명칭 test 
-- 칼럼 no 숫자형3 수치 없을 시 0
--      name 가변성 문자형 20 글자 수치 없을 시 no name
--      hiredate 날짜형 수치 없을 시 오늘날짜로 표기

create table test(
                    no number(3) default 0,
                    name varchar2(20) default 'no name',
                    hiredate date default sysdate
                );
select * from test;

-- 번호,이름,날짜 기입진행
-- 날짜 수정할 때 insert into 테이블 values 값 사용
insert into test(no,name,hiredate) values(1,'홍길동','24/03/30');

-- test에서 번호가 1번인 사람의 이름을 강감찬으로 수정
-- 수정명령어를 사용할 때는 update 테이블 명 set 변경칼럼 = 변경수치값
update test set name = '강감찬'
where no=1;

select * from test;

-- test에서 번호가 0인것을 삭제하고 번호가 2인 데이터를 추가하기
-- 삭제할 때 사용 = delete from 테이블명칭, 
-- 추가 insert into 테이블 (칼럼명) values (값)
desc test;

delete from test
where no=0;

insert into test (no,name,hiredate) values (2,'연개소문',sysdate);

-- DB는 CRUD를 기본적으로 정리됨
-- CREATE,READ(SELECT),UPDATE,DELETE

select * from dept_temp;
-- 현재는 테이블이 없어서 해당결과가 출력이 되지 않는다.
-- 테이블을 복사하여 생성해야한다.
create table dept_temp as select * from dept;

-- dept_temp 테이블에 50,'database','seoul'
insert into  dept_temp values (50,'database','seoul');

-- emp 테이블 구조를 복사하여 emp_temp라는 테이블을 만든다.
create table emp_temp as select * from emp;
-- 테이블 자체를 삭제할 때 사용하는 명령어이다.
drop table emp_temp;
create table emp_temp as select * from emp
where 1<>1; --조건을 말도 안되는것을 걸어서 해당내용을 가져오지 못하게 한다.

--emp_temp : empno, ename, job, mgr, hiredate, sal, comm, deptno
--(2111,'이순신','MANAGER',9999,'07/01/2019',4000,NULL,20) 추가
insert into emp_temp(empno, ename, job, mgr, hiredate,sal, comm, deptno)
            values (2111,'이순신','MANAGER',9999,
            to_date('07/01/2019','DD/MM/YYYY'),4000,NULL,20);
--(3111,'강감찬','MANAGER',9999,4000,NULL,20) 입사일은 오늘날짜로  추가 
insert into emp_temp(empno, ename, job, mgr, hiredate,sal, comm, deptno)
values (3111,'강감찬','MANAGER',9999,sysdate,4000,NULL,20);

select * from emp_temp;            

--3111인 사원의 급여 5000으로 변경
update emp_temp
set sal = 5000
where empno = 3111;

--emp_temp 모든 사원 삭제
delete from emp_temp;
commit;

--p275 서브쿼리를 이용해서 한 번에 여러 데이터 추가(values 사용하지 않는다)
-- 급여등급(salgrade)이 1인 사원만 emp_temp 에 추가
select * from salgrade;
select * from emp where sal between 700 and 1200;

select * from emp;

select * from salgrade;
-- salgrade 테이블로 급여등급 1이 어딘지 확인함
insert into emp_temp(empno, ename, job,mgr, hiredate, sal, comm, deptno)
select e.empno, e.ename, e.job, e.mgr, e.hiredate, e.sal, e.comm, e.deptno
from emp e, salgrade s
where e.sal between s.losal and s.hisal and s.grade=1;
-- 데이터를 기입한 후 급여등급 1을 설정하고 losal에서 hisal 사이기 때문에 s.grade =1 
-- 조건을 준다.

select * from emp_temp;
commit;

---dept 테이블 복사해서 dept_temp2 테이블을 생성하고
-- 40번 부서명을 DATABASE  지역  SEOUL 로 수정
create table dept_temp2
as select * from dept;

update dept_temp2
set dname = 'DATABASE', loc ='SEOUL'
where deptno=40;
commit;

select * from dept_temp2;
---
select * from emp_temp;
--7900번 이름을 강감찬으로 수정
update emp_temp
set ename ='강감찬'
where empno = 7900;
select * from emp_temp;
rollback;

-- dept_temp2  테이블의 40번 내용 수정하기
-- dept 테이블의 40번이 가지는 부서명과 지역으로 수정
select * from dept_temp2 ;
select * from dept;

update dept_temp2
set dname= (select dname from dept where deptno = 40),
    loc =  (select loc from dept where deptno = 40 )
where deptno = 40;

update dept_temp2
set (dname, loc ) = (select dname, loc
                    from dept
                    where deptno =40)
where deptno = 40;
commit;

select * from dept_temp2;
--
select * from emp_temp;
--7900번의 이름을 강감찬으로 수정
update emp_temp
set ename = '강감찬'
where empno = 7900;

select * from emp_temp;

-- dept_temp2  테이블의 40번 내용 수정하기
-- dept 테이블의 40번이 가지는 부서명과 지역으로 수정

select * from dept_temp2;
select * from dept;
update dept_temp2
set dname = (select dname from dept where deptno=40),
    loc = (select loc from dept where deptno=40)
    where deptno = 40;
    
update dept_temp2
set (dname, loc ) = (select dname, loc
                     from dept
                     where deptno =40)
where deptno = 40;                     

--dept_temp2 모든 데이터 삭제
delete from dept_temp2;
select * from dept_temp2;
-- 테이블 삭제
drop table dept_temp2;

-- dept 테이블을 이용해서 dept_tmp 테이블 생성하기
create table dept_tmp
as select * from dept;

select * from dept_tmp;

-- dept_tmp 테이블에 LOCATION 컬럼 추가
alter table dept_tmp
add(location varchar2(50));

-- 10번인 부서의 location을 뉴욕으로 수정
update dept_tmp
set location = 'NEWYORK'
where deptno=10;

-- 칼럼 구조 수정
alter table dept_tmp
modify(location varchar2(70));
commit;

-- 구조확인
DESCRIBE dept_tmp;
desc dept_tmp;

-- 컬럼을 삭제
alter table dept_tmp
drop column location;
commit;
select * from dept_tmp;

-- 컬럼명 LOC를 LOCATION으로 수정
alter table dept_tmp
rename column loc to location;

-- 테이블 명 수정
rename dept_tmp to dept_tmptmp;

select * from dept_tmptmp;
-- 모든 데이터 삭제
delete from dept_tmptmp;

-- 모든 데이터 삭제 구조는 그대로(truncate ddl 이므로 rollback 적용안됌)
truncate table dept_tmptmp;
-- 테이블 전체삭제(데이터 구조 전부삭제)
drop table dept_tmptmp;

--9장 연습문제
--1. 전체 사원 중 ALLEN과 같은 직책(JOB)인 사원들의 사원정보, 부서정보 출력
select e.job, e.empno, e.ename, e.sal, e.deptno, d.dname
from emp e, dept d
where e.deptno = d.deptno
and job = (
            select job from emp
            where ename = 'ALLEN');
--2. 전체 사원의 평균 급여보다 높은 급여를 받는 사원들의 사원정보, 부서정보, 급여 등급 정보 출력
select e.empno,e.ename,d.dname,e.hiredate,d.loc,e.sal,s.grade
from emp e, dept d, salgrade s
where e.deptno = d.deptno and
            e.sal between s.losal and s.hisal and
            sal > (select avg(sal) from emp)
            order by e.sal desc, e.empno;
--3 10번 부서에 근무하는 사원 중 30번 부서에는 존재하지 않는 직책을 가진 사원들의 사원정보 부서정보 출력
select e.empno, e.ename, e.job, e.deptno, d.dname, d.loc
from emp e, dept d
where e.deptno = d.deptno 
and e.deptno = 10
and job not in (select job from emp where deptno = 30);
--4.직책이 SALESMAN인 사람들의 최고 급여보다 높은 급여를 받는 사원들의 사원정보, 급여 등급정보
--(사원번호 오름차순)
-- 다중행 함수를 사용하지 않는 방법
select e.empno, e.ename, e.sal, s.grade
from emp e, salgrade s
where e.sal between s.losal and s.hisal
and sal > (select max(sal) from emp where job='SALESMAN')
order by e.empno;

--다중행 함수를 사용 방법
select e.empno, e.ename, e.sal, s.grade
from emp e, salgrade s
where e.sal between s.losal and s.hisal
and sal > ALL(select sal from emp where job='SALESMAN')
order by e.empno;

---10장 연습문제 p287
create table chap10hw_emp
 as select * from emp;
create table chap10hw_dept
  as select * from dept;
create table chap10hw_salgrade
  as select * from salgrade;
 -- 10-1 CHAP10HW_DEPT 테이블에 50,60,70,80 정보 추가
INSERT INTO CHAP10HW_DEPT (DEPTNO, DNAME, LOC) VALUES (50, 'ORACLE', 'BUSAN'); 
INSERT INTO CHAP10HW_DEPT (DEPTNO, DNAME, LOC) VALUES (60, 'SQL', 'ILSAN');
INSERT INTO CHAP10HW_DEPT (DEPTNO, DNAME, LOC) VALUES (70, 'SELECT', 'INCHEON');
INSERT INTO CHAP10HW_DEPT (DEPTNO, DNAME, LOC) VALUES (80, 'DML', 'BUNDANG'); 
commit;
select * from CHAP10HW_DEPT;
-- 10-2  CHAP10HW_DEPT 테이블에 아래 8명의 사원 추가
INSERT INTO CHAP10HW_EMP
VALUES(7201, 'TEST_USER1', 'MANAGER', 7788, TO_DATE('2016-01-02', 'YYYY-MM-DD'), 4500, NULL, 50);
INSERT INTO CHAP10HW_EMP
VALUES(7202, 'TEST_USER2', 'CLERK', 7201, TO_DATE('2016-02-21', 'YYYY-MM-DD'), 1800, NULL, 50);
INSERT INTO CHAP10HW_EMP
VALUES(7203, 'TEST_USER3', 'ANALYST', 7201, TO_DATE('2016-04-11', 'YYYY-MM-DD'), 3400, NULL, 60);
INSERT INTO CHAP10HW_EMP
VALUES(7204, 'TEST_USER4', 'SALESMAN', 7201, TO_DATE('2016-05-31', 'YYYY-MM-DD'), 2700, 300, 60);
INSERT INTO CHAP10HW_EMP
VALUES(7205, 'TEST_USER5', 'CLERK', 7201, TO_DATE('2016-07-20', 'YYYY-MM-DD'), 2600, NULL, 70);
 
INSERT INTO CHAP10HW_EMP
VALUES(7206, 'TEST_USER6', 'CLERK', 7201, TO_DATE('2016-09-08', 'YYYY-MM-DD'), 2600, NULL, 70);
 
INSERT INTO CHAP10HW_EMP
VALUES(7207, 'TEST_USER7', 'LECTURER', 7201, TO_DATE('2016-10-28', 'YYYY-MM-DD'), 2300, NULL, 80);
 
INSERT INTO CHAP10HW_EMP
VALUES(7208, 'TEST_USER8', 'STUDENT', 7201, TO_DATE('2018-03-09', 'YYYY-MM-DD'), 1200, NULL, 80);
commit;
select * from CHAP10HW_EMP;
--3. CHAP10HW_EMP 에 속한 사원 중 
-- 50번 부서에서 근무하는 사원들의 평균 급여보다 많은 급여를 받고 있는 사원들을
-- 70번 부서로 옮기기
select avg(sal)
from CHAP10HW_EMP
where deptno = 50;

update CHAP10HW_EMP
set deptno = 70
where sal > (
        select avg(sal)
        from CHAP10HW_EMP
        where deptno = 50
);
commit;
select sal from CHAP10HW_EMP where deptno=70;
--4. CHAP10HW_EMP 에 속한 사원 중
--60번 부서의 사원 중에 입사일이 가장 빠른 사원보다 늦게 입사한 
-- 사원의 급여를 10% 인상하고 80번 부서로  옮기기
update CHAP10HW_EMP
set deptno = 80, sal = sal*1.1
where hiredate >(
    select min(hiredate)
    from CHAP10HW_EMP
    where deptno=60
);
commit;
--5. CHAP10HW_EMP에 속한 사원 중 급여 등급이 5인 사원을 삭제한는 SQL
select * from CHAP10HW_EMP
where sal = any (select sal 
               from CHAP10HW_EMP c, chap10hw_salgrade s
               where c.sal between s.losal and s.hisal
               and s.grade = 5);
               
select * from CHAP10HW_EMP
where sal in (select sal 
               from CHAP10HW_EMP c, chap10hw_salgrade s
               where c.sal between s.losal and s.hisal
               and s.grade = 5);  
               
delete from CHAP10HW_EMP
where empno in (select c.empno 
               from CHAP10HW_EMP c, chap10hw_salgrade s
               where c.sal between s.losal and s.hisal
               and s.grade = 5);                 
               
delete from CHAP10HW_EMP
where sal in (select sal 
               from CHAP10HW_EMP c, chap10hw_salgrade s
               where c.sal between s.losal and s.hisal
               and s.grade = 5);    
               
commit;    
select * from CHAP10HW_EMP;

----11장 트랜잭션
-- 트랜잭션 : 더 이상 분할 할 수 없는 최소 수행 단위로 
--          한 번에 수행하여 작업을 완료하거나 모두 수행하지 않거나(작업취소)
--          ALL or Nothing(commit / rollback)
--          TCL

-- p298 읽기일관성
-- 격리수준
-- Oracle : Read Commited
-- MySQL  : Repeatable  Commited

--12장 연습문제 p324
--1.

drop table emp_hw;
create table emp_hw(
    empno number(4),
    ename varchar2(10),
    job   varchar2(9),
    mgr number(4),
    hiredate date,
    sal number(7,2),
    comm number(7,2),
    deptno number(2)
);
--2. emp_hw테이블에 bigo 컬럼 추가
alter table emp_hw
add bigo varchar2(20);

select * from emp_hw;
--3. bigo 크기를 30으로 변경
alter table emp_hw
modify bigo varchar2(30);
desc emp_hw;
--4.BIGO를 REMARK로 변경
alter table emp_hw
rename column bigo to remark;
select * from emp_hw;
--5. EMP_HW 테이블에 EMP 테이블의 데이터를 모두 저장, 단 REMARK 열은 NULL 로 삽입

insert into emp_hw
select empno, ename, job ,mgr, hiredate,sal, comm, deptno,NULL
from emp;

delete from emp_hw;
commit;

select * from emp_hw;
insert into emp_hw(empno, ename, job ,mgr, hiredate,sal, comm, deptno)
select *
from emp;
commit;
--6 EMP_HW 테이블 삭제
drop table EMP_HW;
